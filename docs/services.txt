toppcloud Services
------------------

This document answers the question: what does toppcloud do, and what
does my app do?

The items listed here are things toppcloud does *for* you, and so you
shouldn't do them for yourself.

TOPPCLOUD environmental variable
================================

To see if you are running in a toppcloud production environment, check
``os.environ.get('TOPPCLOUD', '').startswith('toppcloud/')``. In
development this variable will exist but start with ``'devel/'``.

Secrets
=======

If you need a "secret" (something random value that is persistent on
the server), get it like::

    from tcsupport.secret import get_secret
    secret = get_secret()

This is a stable, ASCII secret.

Temporary files
===============

Just kidding; there is no support for temporary files!  This is just a
reminder to use the ``tempfile`` module like usual; it works fine.

Persistence
===========

All persistence gets handled in some fashion by toppcloud.  This is
just so toppcloud knows about it, and so that your app handles what it
should.

Files
~~~~~

*Persistent* files need to be handled by toppcloud.  In your
``app.ini`` put::

    service.files =

That line enables the service.  Your application then gets the
environmental variable:

``CONFIG_FILES``:
    Path to where you can write files.

You only get *one* location for files for your entire app, so it's
recommended you use additional directories under this location for
different kinds of files (even if to start you can only think of one
kind of file).

If you want to use SQLite you could simply require the necessary
packages and then use this files service to store the database.

PostGIS
~~~~~~~

For PostGIS (PostgreSQL with the PostGIS extensions) do::

    service.postgis =

Then look for these environmental variables:

``CONFIG_PG_DBNAME``: 
    The database name.

``CONFIG_PG_USERNAME``: 
    The username to connect as.

``CONFIG_PG_PASSWORD``: 
    The password to use (an empty string means no password is required).

``CONFIG_PG_HOST``: 
    The host (or host:port) to connect to; an empty string means
    localhost.

``CONFIG_PG_SQLALCHEMY``:
    The complete connection string needed for SQLAlchemy.

Right now it's all local, and there won't be any password or host, but
in the future that might change.  And in development you can configure
it however you want.

CouchDB
~~~~~~~

For CouchDB do::

    service.couchdb =

Then look for:

``CONFIG_COUCHDB_DB``:
    The name of the database to connect to.

``CONFIG_COUCHDB_HOST``:
    The host:port to connect to.

Installing Packages
~~~~~~~~~~~~~~~~~~~

All your packages should be installed by toppcloud.  You can ask for a
new (Ubuntu) package to be installed by putting this into your
``app.ini``::

    packages = package1
               package2

This makes toppcloud run ``apt-get install package1 package2``
everytime your application is update (conveniently if the packages are
already installed then ``apt-get`` is fast and does nothing).

Local/Development Configuration
============================================================

This all applies to local development (using ``toppcloud serve``), but
toppcloud does not actually setup any of this.  It's up to you to
install the necessary servers, create the databases, etc.

You can do this however you want, and effect the configuration using
``~/.toppcloud.conf`` -- each of these services looks for
configuration overrides here.  You should put this configuration in a
section ``[devel]`` or ``[devel:APP_NAME]`` if you want to override a
value just for one application (instead of all applications).  You
might do something like::

      [devel]
      # Use port 5433, where PG 8.3 is running:
      postgis.host = localhost:5433

      [devel:someapp]
      postgis.dbname = foobar

Then all applications will look for the database at
``localhost:5433``, and the ``someapp`` application will also use the
database name ``foobar``.  If you put the literal string ``APP_NAME``
in any configuration value, that will be substituted with the
application name; you might use it like::

    [devel]
    postgis.dbname = test_APP_NAME
